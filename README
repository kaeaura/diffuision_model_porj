Toy Examples in Diffusion Models
------------------------------
Wed May 18 16:40:26 CST 2011

# getting helps
> python run.py --help

# running PageRank algorithm, output to file named toy_data/pagerank_result
> python run.py -G toy_data/g.el -p -a .85 -O toy_data/pagerank_result

file : toy_data/g.el
0 1
1 2
2 3
3 4
3 0
4 5
1 5
2 5

# running DiffusionRank algorithm, output to file named toy_data/diffusionrank_result
> python run.py -G toy_data/g.el -d --heat toy_data/heat -O toy_data/diffusionrank_result

file : toy_data/heat
3
0
0
0
0
0

# running LinearThresoldModel algorithm, output to file named toy_data/lt_result
> python run.py -G toy_data/g.el -l --seeds toy_data/seed -O toy_data/lt_result

file : toy_data/seed
4
5

# running IndependentCascadeModel algorithm, output to file named toy_data/ic_result
> python run.py -G toy_data/g.el -c --seeds toy_data/seed -O toy_data/ic_result

# IndependentCascade README from Fu-min
The IC model
1. prob_degree(G)
   Assign probability weights to the graph G according to the degree of the
   active node.

2. testg()
   Returns a testing graph that looks like that:
   Nodes:[1,2,3,4,5,6]
   Edges:[(1,2),(1,3),(2,3),(2,4),(2,5),(2,6)]

3. iter(G, subset)
   Returns a list that consistes of nodes that are active after all possible IC iterations. For example, consider the graph generated by testg(), and suppose the initial activated subset is [1], enter iter(testg(),[1]) to perform an IC iteration.
